@using Syncfusion.EJ2
@section ControlsSection{
    @{
        
        var Point = "Point";
    }
    <div class="control-section col-lg-9" align='center'>
        <ejs-accumulationchart id="container" title="RIO Olympics Gold" load="load" enableSmartLabels="true" textRender="textRender" pointRender="pointRender">
            <e-accumulationchart-tooltipsettings enable="false"></e-accumulationchart-tooltipsettings>
            <e-accumulationchart-legendsettings visible="false">
            </e-accumulationchart-legendsettings>
            <e-accumulation-series-collection>
                <e-accumulation-series explode="true" dataSource="ViewBag.dataSource" xName="xValue" yName="yValue" name="RIO" groupTo="9" groupMode="Point">
                    <e-accumulationseries-datalabel visible="true" position="Outside">
                        <e-connectorstyle type="Line" length="5%"></e-connectorstyle>
                        <e-font size="14px"></e-font>
                    </e-accumulationseries-datalabel>
                </e-accumulation-series>
            </e-accumulation-series-collection>
        </ejs-accumulationchart>
    </div>
    <div class="col-lg-3 property-section">
        <table id="property" title="Properties" style="width: 100%">
            <tbody>
                <tr>
                    <td style="width: 50%">
                        <div>
                            GroupModes
                        </div>
                    </td>
                    <td style="width: 50%;">
                        <div>
                            <ejs-dropdownlist id="data" dataSource="@ViewBag.data" value="Point" popupHeight="220px" change="changedata"></ejs-dropdownlist>
                        </div>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td style="width: 40%">
                        <div>
                            Group To
                        </div>
                    </td>
                    <td style="width: 40%;">
                        <div data-role="rangeslider">
                            <input type="range" name="range-min" id="clubpoint" value="9" min="0" max="27" style="width:100%">
                        </div>
                    </td>
                    <td style="width: 30%;">
                        <p id="clubvalue" style="font-weight: normal;padding-top:10px">9</p>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <script>
        function changedata(args) {
            var currentValue = args.value === 'Point' ? 9 : 8;
            document.getElementById('clubpoint').value = currentValue.toString();
            var pie = document.getElementById('container').ej2_instances[0];
            pie.series[0].groupMode = args.value;
            clubchange(currentValue);

        }
        @*custom code start*@
        function load(args) {
            var indexedTheme = location.hash.split('/')[1];
            indexedTheme = indexedTheme ? indexedTheme : 'Material';
            args.accumulation.theme = (indexedTheme.charAt(0).toUpperCase() + indexedTheme.slice(1).replace(/dark/i, "Dark").replace(/light/i, "Light"));
        }
        @*custom code end*@
        function pointRender(args) {
            if (args.point.isClubbed || args.point.isSliced) {
                args.fill = '#D3D3D3';
            }

        }
        function textRender(args) {
            args.text = args.point.x + ' ' + args.point.y;
        }
        function clubchange(value) {
            var pie = document.getElementById('container').ej2_instances[0];
            pie.series[0].groupTo = value.toString();
            pie.series[0].animation.enable = false;
            document.getElementById('clubvalue').innerHTML = value.toString();
            pie.removeSvg();
            pie.refreshSeries();
            pie.refreshChart();
        }
        
            document.getElementById('clubpoint').onchange = () => {
                clubchange(+(document.getElementById('clubpoint')).value);
            };
    </script>
}
@*custom code start*@
@section Meta{
                    <meta name="description" content="This example demonstrates the Grouping in ASP.NET Core Chart control. Explore here for more details."/>
                }
@section ActionDescription{

    <div id="action-description">
        <p>
            This sample illustrates the grouping functionality in pie series.  The grouping value can be changed by using <code>Group To</code> property.
        </p>
    </div>
}

@*custom code end*@
@section Description {
    <div id="description">
        <p> In this example, you can see how to <code>group</code> points in pie chart.</p>
        <p> Points having value below the <code>'groupTo'</code> value are grouped and showed as separate point. You can view this points on mouse click and can customize this point using <code>'pointRender'</code> event. </p>
        <p> DataLabel is used to represent individual data and its value.</p>
    </div>

}
@section Title{
                 <title>ASP.NET Core Chart Grouping Example - Syncfusion Demos </title>
             }
@section Header{
                <h1 class='sb-sample-text'>Example of Grouping in ASP.NET Core Chart Control</h1>
            }