@using Syncfusion.EJ2
@section ControlsSection{
  <div class="control-section" align='center'>
        <ejs-accumulationchart id="container" selectionMode="Point" title="Mobile Browser Statistics" load="load" loaded="loaded" animationComplete="animation" textRender="textRender">
            <e-accumulationchart-tooltipsettings enable="false"></e-accumulationchart-tooltipsettings>
            <e-accumulationchart-legendsettings toggleVisibility=false position="Right" height="28%" width="44%">
            </e-accumulationchart-legendsettings>
            <e-accumulation-series-collection>
                <e-accumulation-series dataSource="ViewBag.dataSource" xName="x" yName="y" name="Revenue" innerRadius="40%">
                    <e-accumulationseries-datalabel name="${point.y}" visible="true">
                        <e-font fontWeight="600" color="white"></e-font>
                    </e-accumulationseries-datalabel>
                </e-accumulation-series>
            </e-accumulation-series-collection>
        </ejs-accumulationchart>
    </div>

    <script>
        var centerTitle = document.createElement('div');
        centerTitle.innerHTML = 'Expenses in Year';
        centerTitle.style.position = 'absolute';
        centerTitle.style.visibility = 'hidden';
        var count = 0;
        function load(args) {
            var indexedTheme = location.hash.split('/')[1];
            indexedTheme = indexedTheme ? indexedTheme : 'Material';
            args.accumulation.theme = (indexedTheme.charAt(0).toUpperCase() + indexedTheme.slice(1).replace(/dark/i, "Dark").replace(/light/i, "Light"));
        }
        function loaded(args) {
            var pie = document.getElementById('container').ej2_instances[0];
            pie.loaded = null;
            var pieinterval = setInterval(function() {
                    if (document.getElementById('container')) {
                        if (count === 0) {
                            pie.series[0].dataSource = [{ 'x': 'Net-tution and Fees', y: 10 }, { 'x': 'Self-supporting Operations', y: 10 },
                            { 'x': 'Private Gifts', y: 13 }, { 'x': 'All Other', y: 14 },
                            { 'x': 'Local Revenue', y: 9 }, { 'x': 'State Revenue', y: 13 },
                            { 'x': 'Federal Revenue', y: 8 }
                            ];
                            pie.animate();
                            count++;
                        }
                        else if (count === 1) {
                            pie.series[0].dataSource = [
                                { 'x': 'Net-tution and Fees', y: 120 }, { 'x': 'Self-supporting Operations', y: 31 },
                                { 'x': 'Private Gifts', y: 6 }, { 'x': 'All Other', y: 12 },
                                { 'x': 'Local Revenue', y: 25 }, { 'x': 'State Revenue', y: 11 },
                                { 'x': 'Federal Revenue', y: 12 }
                            ];
                            pie.animate();
                            count++;
                        }
                        else if (count === 2) {
                            pie.series[0].dataSource = [
                                { 'x': 'Net-tution and Fees', y: 6 }, { 'x': 'Self-supporting Operations', y: 22 },
                                { 'x': 'Private Gifts', y: 11 }, { 'x': 'All Other', y: 15 },
                                { 'x': 'Local Revenue', y: 13 }, { 'x': 'State Revenue', y: 10 },
                                { 'x': 'Federal Revenue', y: 8 }
                            ];
                            pie.animate();
                            count++;
                        }
                        else if (count === 3) {
                            pie.series[0].dataSource = [
                                { 'x': 'Net-tution and Fees', y: 15 }, { 'x': 'Self-supporting Operations', y: 10 },
                                { 'x': 'Private Gifts', y: 18 }, { 'x': 'All Other', y: 20 },
                                { 'x': 'Local Revenue', y: 30 }, { 'x': 'State Revenue', y: 20 },
                                { 'x': 'Federal Revenue', y: 25 }
                            ];
                            pie.animate();
                            count++;
                        }
                        else if (count === 4) {
                            pie.series[0].dataSource = [
                                { 'x': 'Net-tution and Fees', y: 21 }, { 'x': 'Self-supporting Operations', y: 10 },
                                { 'x': 'Private Gifts', y: 15 }, { 'x': 'All Other', y: 15 },
                                { 'x': 'Local Revenue', y: 11 }, { 'x': 'State Revenue', y: 20 },
                                { 'x': 'Federal Revenue', y: 60 }
                            ];
                            pie.animate();
                            count = 0;
                        }
                    } else {
                        clearInterval(pieinterval);
                    }
                },
                3000);

        }

        function animation(args) {
            centerTitle.style.fontSize = getFontSize(args.accumulation.initialClipRect.width);
            var rect = centerTitle.getBoundingClientRect();
            centerTitle.style.top = (args.accumulation.origin.y - rect.height / 2) + 'px';
            centerTitle.style.left = (args.accumulation.origin.x - rect.width / 2) + 'px';
            centerTitle.style.visibility = 'visible';
            let points = args.accumulation.visibleSeries[0].points;
            for (var point of points) {
                if (point.labelPosition === 'Outside' && point.labelVisible) {
                    var label = document.getElementById('container_datalabel_Series_0_text_' + point.index);
                    label.setAttribute('fill', 'black');
                }
            }

        }

        function textRender(args) {
            var pie = document.getElementById('container').ej2_instances[0];
            args.series.dataLabel.font.size = getFontSize(pie.initialClipRect.width);
            args.text = args.text + '%';
        }

        function getFontSize(width) {
            if (width > 300) {
                return '13px';
            } else if (width > 250) {
                return '8px';
            } else {
                return '6px';
            }
        }
        document.getElementById('container').appendChild(centerTitle);
    </script>
}
}
    @*custom code start*@
@section Meta{
                    <meta name="description" content="This example demonstrates the Pie with Legend in ASP.NET Core Chart control. Explore here for more details."/>
                }
    @*custom code end*@
@section ActionDescription{

    <div id="action-description">
        This sample demonstrates pie chart with legend. For pie chart, you can change start angle of chart by Pie Angle in properties panel. Outer radius for pie chart can be changed by Outer Radius. Explode Index and explode radius for chart can be changed by Explode Radius and Explode Index
    </div>
}
@section Description {
    <div id="description">
        In this example, you can see how to render and configure the pie chart. You can use border, fill properties to customize the pie point. dataLabel is used to represent individual data and its value.

        Tooltip is enabled in this example, to see the tooltip in action, hover a point or tap on a point in touch enabled devices.
    </div>

}
@section Title{
                 <title>ASP.NET Core Chart Pie with Legend Example - Syncfusion Demos </title>
             }
@section Header{
                <h1 class='sb-sample-text'>Example of Pie with Legend in ASP.NET Core Chart Control</h1>
            }