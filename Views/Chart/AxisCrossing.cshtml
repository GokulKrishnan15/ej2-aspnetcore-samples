@using Syncfusion.EJ2
@section ControlsSection{
    @{
       var xAxis = "xAxis";

    }
    <div class="control-section col-md-9" align="center">
        <ejs-chart id="container" title="Spline Interpolation" load="load">
            <e-chart-tooltipsettings enable="true">
            </e-chart-tooltipsettings>
            <e-chart-primaryxaxis minimum=-8 maximum=8 interval=2 crossesAt="0" minorTicksPerInterval="3" >
                <e-majorgridlines width="0"></e-majorgridlines>
            </e-chart-primaryxaxis>
            <e-chart-chartarea>
                <e-chartarea-border width="0"></e-chartarea-border>
            </e-chart-chartarea>
            <e-chart-primaryyaxis minimum=-8 maximum=8 interval=2 crossesAt=0 minorTicksPerInterval="3">
                <e-majorgridlines width="0"></e-majorgridlines>
            </e-chart-primaryyaxis>
            <e-series-collection>
                <e-series dataSource="ViewBag.line" name="Line Interpolation" xName="xValue" width="2" opacity="1" yName="yValue1" type="@Syncfusion.EJ2.Charts.ChartSeriesType.Line" fill="blue"></e-series>
                <e-series dataSource="ViewBag.spline" name="Cubic Spline Interpolation" xName="xValue" width="2" opacity="1" yName="yValue1" type="@Syncfusion.EJ2.Charts.ChartSeriesType.Spline" fill="green"></e-series>
                <e-series dataSource="ViewBag.scatter" name="Data points" xName="xValue" yName="yValue1" fill="red" type="Scatter">
                    <e-series-marker height="12" width="12" visible="true"></e-series-marker>
                </e-series>
            </e-series-collection>
        </ejs-chart>
    </div>
    <div class="col-md-3 property-section">
        <table id="property" title="Properties" style="width: 100%">
            <tbody>
                <tr style="height: 50px">
                    <td style="width: 60%">
                        <div>Axis:</div>
                    </td>
                    <td style="width: 40%;">
                        <ejs-dropdownlist id="axis" dataSource="@ViewBag.axis" change="onChange" value="xAxis" popupHeight="220px"></ejs-dropdownlist>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td style="width: 60%">
                        <div>Crosses Value:</div>
                    </td>
                    <td style="width: 40%;">
                        <ejs-numerictextbox id="number" min="-8" max="8" step="2" value=0 width="120" change="valueChange"></ejs-numerictextbox>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td style="width: 60%">
                        <div>Placing Label Near to Axis Line:</div>
                    </td>
                    <td style="width: 40%;">
                        <div style="margin-top: 0px;">
                            <input type="checkbox" id="axisElements" name="PlaceNextToAxisLine" checked="">
                        </div>
                    </td>
                </tr>

            </tbody>
        </table>
    </div>
    <script>
    @*custom code start*@
        function load(args) {
            var indexedTheme = location.hash.split('/')[1];
            indexedTheme = indexedTheme ? indexedTheme : 'Material';
            args.chart.theme = (indexedTheme.charAt(0).toUpperCase() + indexedTheme.slice(1).replace(/dark/i, "Dark").replace(/light/i, "Light"));
        }
    @*custom code end*@
        function onChange(args) {
            var chart = document.getElementById('container').ej2_instances[0];
            var target = document.getElementById('axisElements');
            var cross = document.getElementById("number").ej2_instances[0];
            if (axis.value === "xAxis") {
                target.checked = chart.primaryXAxis.placeNextToAxisLine;
                cross.value = + chart.primaryXAxis.crossesAt;
                //chart.primaryXAxis.crossesAt = cross.value;
            } else if (this.value === "yAxis") {
                //chart.primaryYAxis.crossesAt = cross.value;
                target.checked = chart.primaryYAxis.placeNextToAxisLine;
                cross.value = + chart.primaryYAxis.crossesAt;
            }
            chart.dataBind();

        }
        function valueChange(args) {
            var chart = document.getElementById('container').ej2_instances[0];
            var axis = document.getElementById("axis").ej2_instances[0];
            var cross = document.getElementById("number").ej2_instances[0];
            if (axis.value === "xAxis") {
                chart.primaryXAxis.crossesAt = cross.value;
            } else if (axis.value === "yAxis") {
                chart.primaryYAxis.crossesAt = cross.value;
            }
            chart.dataBind();
        }

        document.getElementById('axisElements').onchange = function (e) {
            var axis = document.getElementById("axis").ej2_instances[0];
            var chart = document.getElementById("container").ej2_instances[0];
            var value = e.target.checked;
            if (axis.value === "xAxis") {
                chart.primaryXAxis.placeNextToAxisLine = value;
            } else {
                chart.primaryYAxis.placeNextToAxisLine = value;
            }
            chart.dataBind();
        }
    </script>

}
@*custom code start*@
@section Meta{
                    <meta name="description" content="This example demonstrates the Axis Crossing in ASP.NET Core Chart control. Explore here for more details."/>
                }
@*custom code end*@
@section ActionDescription{
    <div id="action-description">
        <p>
            This sample illustrates an interpolation of data points between linear and cubic by using spline and line series.
        </p>
    </div>
}
@section Description{
    <div>
        <p>
            This sample demonstrates the axis crossing behavior in chart.
            Axis can be positioned anywhere in the chart area by using the <code>crossesAt</code> property of axis. This property specifies where the horizontal axis should intersect or cross the vertical axis and vice-versa.
        </p>
        <p>
            Default value of crossesAt property is null. So, you can use <code>placeNextToAxisLine</code> property to place the axis labels and ticks next to axis line.
            When there are multiple axes, you can choose an axis to cross by using <code>crossesInAxis</code> property.
            If the axis name is not valid, primaryXAxis or primaryYAxis will be used for crossing, by default.
        </p>
        <p>
            More information on the smart axis labels can be found in this &nbsp;
            <a target="_blank" href="http://ej2.syncfusion.com/react/documentation/chart/api-series.html#type-chartseriestype">documentation section</a>.
        </p>
    </div>
}
@section Title{
                 <title>ASP.NET Core Chart Axis Crossing Example - Syncfusion Demos </title>
             }
@section Header{
                <h1 class='sb-sample-text'>Example of Axis Crossing in ASP.NET Core Chart Control</h1>
            }